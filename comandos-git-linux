COMANDOS PARA CONFIGURACION GIT GITHUB:
--------------------------------------
git config --global user.name danicor2688
git config --global user.email danicor2688@gmail.com
git config --list
# valida los datos que configuraste al inicio

git config --global user.email 117961516+daniel2688@users.noreply.github.com
# para que GitHub no muestre mi correo personal y use este correo especial para las operaciones de Git

git config --global -e
# abrirá el archivo de configuración global en el editor de texto predeterminado de tu sistema
# para realizar cambios en la configuración directamente del archivo .gitconfig

COMANDOS PARA USO DE GIT: (git add prepara los cambios de mi archivo actual y sube los archivos al staggin area)
-------------------------

INICIAR SESION EN LA CARPETA workspace para poder trabajar en el repositorio (C:\Users\simpl\workspace)
MI RAMA PRINCIPAL ES main:

git init               
# para iniciar el repositorio

git init -b main
# para iniciar el repositorio main

ls -a                   
# para ver directorios ocultos
code .                  
# abre la carpeta en el visual studio code

git status             
# muestra el estado actual de nuestro repositorio

git add archivo.txt    
# agrega el archivo a la etapa de staggging (prueba)

git add .               
# agrega todos los archivos

git commit -m git commit "mensaje sobre los cambios que se realizo" o git commit
# valida si es que se realizado algun cambio

git rm archivo.txt  o  git rm *.txt (para remover varios archivos con extension txt)
# para remover el archivo local, dejarlo en estado para ejecutar commit -m y guardar los cambios en stagging

git restore --staged archivo.txt
# para restaurar archivo en la etapa de staggin area

git restore archivo.txt
# para recuperar el archivo local

git mv archivo.txt archivotest.txt
# para poder cambiar el nombre del archivo en estaggin area y listo para ejecutar commit -m

git status -s
# para ver los estados de los archivos

git diff
# para ver la nuevas modificaciones respecto a estado actual del archivo

git diff --staged
# para ver los cambios en la etapa de stagging

git log --oneline
# para ver el historial de cambio

git log --graph
# para ver el historial de cambio como ramas

git branch
# para ver las ramas

git branch -m nuevo-nombre
# para cambiar el nombre de la rama local, para eso tienes que estar en la misma rama a cambiar

git branch -m viejo-nombre nuevo-nombre
# para cambiar el nombre de una rama en especifica a otra rama

git switch -c "nombre de la rama"
# para poder crear una rama con ese nombre y cambiar a esa rama para que sea apuntado por el HEAD

git switch "nombre de la rama"
# para poder crear una rama con ese nombre y para que sea apuntado por el HEAD

git checkout "nombre de la rama"
# para ir a la rama indicada

git checkout archivo.txt
# para deshacer los cambios locales en un archivo y regresar al ultimo estado confirmado

git checkout hash-de-la-confirmacion -- nombre-del-archivo
# para viajar en el tiempo y ver el contenido del archivo en ese punto especifico del historial

git checkout -b "nombre de la rama"
# para crear y cambiar a la rama indicada

git checkout origin/main
# para estar en un commit especifico que representa la ultima posicion de la rama remota main 

git merge --continue
# para continuar con el proceso de merge en un conflicto de fusion de ramas

git reset archivo.txt
# para regresar al archivo indicado anteriormente

git merge "nombre de la rama"
# Hace la union de la rama con la rama master, para eso se debe de estar en la rama main y escriibir texto descriptivo

git branch -d "nombre de la rama"  (debes estar en otra rama para eliminarla)
# para eliminar la rama que ya ha sido completamente fusionada con la rama actual, mostrara mensaje de advertencia

git branch -D "nombre de la rama"
# para eliminar la rama sin importar si sus cambios se han fusionado o no

----------------------------------------------------------------------------------------
git remote add origin https://github.com/danie2688/test-repository.git
# para que nosotros podamos indicar si es que vamos a tener un servidor remoto para subir nuestros cambios.
# le indicamos de donde nosotros vamos a obtener nuestro codigo y a donde vamos a subir los cambios realizados.

git push -u origin "nombre de la rama"
# si queremos subir la rama en el repositorio GitHub estando en cualquier rama
# adicional se configuro una relación de seguimiento entre la rama local y la rama remota
# usariamos ahora solo "git push" en caso de hacer un push directo

git push origin --delete "nombre de la rama"
# para elimnar la rama en el repositorio GitHub

git push
# si queremos subir la rama estando en la misma, luego nos indica que ingresemos nuestros datos de usuario GitHub

git remote -v
# muestra las URLs de los repositorios remotos vinculados a tu repositorio local. 
# La salida incluirá tanto la URL para recuperar (fetch) como la URL para enviar (push) cambios al repositorio remoto


COMANDOS PARA USO DE LINUX:
--------------------------------------------------
ls -a
# veo todas las carpetas hasta las ocultas

touch archivo.txt
# crear archivo.txt

cat archivo.txt
# para leer el contenido del archivo

cp -r archivo.txt archivo1.txt
# copia todos los archivos de archivo.txt a archivo2.txt

nano archivo.txt o vim archivotest.txt
# escribir en el archivo.txt y salir con Ctrl+x

rm archivo.txt
# eliminar el archivo

rm -rf archivo.txt
# elimina carpeta sin necesidad de dar confiramcion

mv archivo.txt archivo1.txt
# cambiar el nombre del archivo



